<?php

/**
 * @file
 * Intercepts responsive images and check if all variants are available. If not, add them to a queue for later processing.
 */


/**
 * Implementation of hook_menu().
 */
function ris_cache_warmer_menu() {
  $items = array();
  $items['admin/content/handle-ris-cache'] = array(
    'page callback' => 'ris_cache_warmer_handle_queue_json',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook_preprocess_responsive_image().
 */
function ris_cache_warmer_preprocess_responsive_image($vars) {
  global $user;
  if ($user->uid != 0) {
    $file = (array) $vars['file'];
    $used_style = $vars['style'];

    ris_cache_warmer_add_file_to_queue($used_style, $file);
  }
}


function ris_cache_warmer_add_file_to_queue($preset, $file) {
  $callback = function($style_name, $ratio, $s, $size_key, $style) use($preset, $file) {
    if ($preset == $style['name']) {
      $preset_name = _responsive_image_styles_get_style_name($style, $ratio, $s);
      ris_cache_warmer_add_to_queue($preset_name, $file);
    }
  };

  responsive_image_styles_iterate_steps_and_call($callback);
}


/**
 * Add an url to the cache-warmer-queue.
 */
function ris_cache_warmer_add_to_queue($preset_name, $file) {

  $path = image_style_path($preset_name, $file['uri']);

  if (!file_exists($path)) {

    if (!_rb_cache_warmer_check_if_in_queue($preset_name, $file['uri'])) {
      $queue = DrupalQueue::get('ris_cache_warmer');

      $data = array(
        'uri' => $file['uri'],
        'preset_name' => $preset_name,
      );
      $queue->createItem($data);
    }
  }
}

/**
 * Check if an item is already in the queue.
 *
 * @param string $preset_name
 *   the image-style-preset-name to check
 * @param string $uri
 *   the file-uri
 *
 * @return bool
 *   True if already in queue.
 */
function _rb_cache_warmer_check_if_in_queue($preset_name, $uri) {
  static $queue_items = NULL;
  if (is_null($queue_items)) {
    $query = db_query('SELECT q.data FROM {queue} q WHERE q.name = :name', array(
      ':name' => 'ris_cache_warmer')
    );

    $queue_items = $query->fetchAll();
  }

  foreach ($queue_items as $row) {
    $data = unserialize($row->data);
    if (($data['uri'] == $uri)  && ($data['preset_name'] == $preset_name)) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Implements hook_cron_queue_info().
 */
function ris_cache_warmer_cron_queue_info() {
  $queues = array();
  $queues['ris_cache_warmer'] = array(
    'worker callback' => 'ris_cache_warmer_worker',
    'time' => 100,
  );

  return $queues;
}


/**
 * Worker function which gets the image via a http-request.
 */
function ris_cache_warmer_worker($data) {

  $url = image_style_url($data['preset_name'], $data['uri']);

  if (module_exists('httprl')) {
    $options = array(
      'headers' => array(
        // Set the Host header to self.
        'Host' => $_SERVER['HTTP_HOST'],
      ),
    );
    httprl_request($url, $options);
  }
  else {
    drupal_http_request($url, array());
  }
}


/**
 * Menu-handler, which will handle one queue-item and return the number or remaining items as json.
 */
function ris_cache_warmer_handle_queue_json() {
  $queue = DrupalQueue::get('ris_cache_warmer');
  $num_items = $queue->numberOfItems();

  if ($item = $queue->claimItem()) {
    ris_cache_warmer_worker($item->data);
    $queue->deleteItem($item);
    $num_items -= 1;
  }

  drupal_json_output(array('remaining' => $num_items));
}


/**
 * Implementation of hook_page_build().
 *
 * Add js to page if user is logged in.
 */
function ris_cache_warmer_page_build() {
  global $user;
  if ($user->uid != 0) {
    drupal_add_js(drupal_get_path('module', 'ris_cache_warmer') . '/ris_cache_warmer.js', 'file');
  }
}


/**
 * Get all supported field-types, and add files to the cache-warmer-queue.
 */
function ris_cache_warmer_collect_all_images_from_entity($entity_type, $entity) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_id = $field['id'];
    $field_name = $field['field_name'];

    if (!in_array($field['type'], array('image'))) {
      continue;
    }

    if (isset($entity->$field_name) || property_exists($entity, $field_name)) {

      // Get field-info for this field:
      $field_info = field_info_instance($entity_type, $field_name, $bundle);
      foreach ($field_info['display'] as $value) {
        if ($value['module'] == 'responsive_image_styles') {

          // Ok, this field uses responsive_image_styles as a formatter:
          $used_preset = $value['settings']['preset'];

          foreach ($entity->$field_name as $values) {
            foreach ($values as $v) {
              $file = file_load($v['fid']);
              if ($file) {
                ris_cache_warmer_add_file_to_queue($used_preset, (array) $file);
              }
            }
          }
        }
      }
    }
  }
}


/**
 * Implementation of hook_field_storage_pre_insert().
 */
function ris_cache_warmer_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  ris_cache_warmer_collect_all_images_from_entity($entity_type, $entity);
}


/**
 * Implementation of hook_field_storage_pre_update().
 */
function ris_cache_warmer_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
    ris_cache_warmer_collect_all_images_from_entity($entity_type, $entity);

}
